--
-- Script was generated by Devart dbForge Studio 2019 for MySQL, Version 8.2.23.0
-- Product home page: http://www.devart.com/dbforge/mysql/studio
-- Script date 28/11/2021 22:23:22
-- Server version: 5.7.36
-- Client version: 4.1
--

-- 
-- Disable foreign keys
-- 
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;

-- 
-- Set SQL mode
-- 
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;

-- 
-- Set character set the client will use to send SQL statements to the server
--
SET NAMES 'utf8';

--
-- Set default database
--
USE projeto;

--
-- Drop procedure `pr_usuario_atualiza`
--
DROP PROCEDURE IF EXISTS pr_usuario_atualiza;

--
-- Drop view `vw_disponibilities`
--
DROP VIEW IF EXISTS vw_disponibilities CASCADE;

--
-- Drop procedure `pr_disponibility_delete`
--
DROP PROCEDURE IF EXISTS pr_disponibility_delete;

--
-- Drop procedure `pr_disponibility_insert`
--
DROP PROCEDURE IF EXISTS pr_disponibility_insert;

--
-- Drop procedure `pr_disponibility_update`
--
DROP PROCEDURE IF EXISTS pr_disponibility_update;

--
-- Drop table `disponibilities`
--
DROP TABLE IF EXISTS disponibilities;

--
-- Drop table `day_of_week`
--
DROP TABLE IF EXISTS day_of_week;

--
-- Drop view `vw_category_task`
--
DROP VIEW IF EXISTS vw_category_task CASCADE;

--
-- Drop view `vw_tasks`
--
DROP VIEW IF EXISTS vw_tasks CASCADE;

--
-- Drop procedure `pr_category_task_delete`
--
DROP PROCEDURE IF EXISTS pr_category_task_delete;

--
-- Drop procedure `pr_category_task_insert`
--
DROP PROCEDURE IF EXISTS pr_category_task_insert;

--
-- Drop table `categories_tasks`
--
DROP TABLE IF EXISTS categories_tasks;

--
-- Drop procedure `pr_task_delete`
--
DROP PROCEDURE IF EXISTS pr_task_delete;

--
-- Drop procedure `pr_task_insert`
--
DROP PROCEDURE IF EXISTS pr_task_insert;

--
-- Drop procedure `pr_task_update`
--
DROP PROCEDURE IF EXISTS pr_task_update;

--
-- Drop table `tasks`
--
DROP TABLE IF EXISTS tasks;

--
-- Drop view `vw_priorities`
--
DROP VIEW IF EXISTS vw_priorities CASCADE;

--
-- Drop procedure `pr_priority_insert`
--
DROP PROCEDURE IF EXISTS pr_priority_insert;

--
-- Drop table `priorities`
--
DROP TABLE IF EXISTS priorities;

--
-- Drop view `vw_categories`
--
DROP VIEW IF EXISTS vw_categories CASCADE;

--
-- Drop view `vw_category_routine`
--
DROP VIEW IF EXISTS vw_category_routine CASCADE;

--
-- Drop procedure `pr_category_delete`
--
DROP PROCEDURE IF EXISTS pr_category_delete;

--
-- Drop procedure `pr_category_insert`
--
DROP PROCEDURE IF EXISTS pr_category_insert;

--
-- Drop procedure `pr_category_routine_insert`
--
DROP PROCEDURE IF EXISTS pr_category_routine_insert;

--
-- Drop procedure `pr_category_update`
--
DROP PROCEDURE IF EXISTS pr_category_update;

--
-- Drop procedure `pr_routine_delete`
--
DROP PROCEDURE IF EXISTS pr_routine_delete;

--
-- Drop table `categories`
--
DROP TABLE IF EXISTS categories;

--
-- Drop procedure `pr_category_routine_delete`
--
DROP PROCEDURE IF EXISTS pr_category_routine_delete;

--
-- Drop table `categories_routines`
--
DROP TABLE IF EXISTS categories_routines;

--
-- Drop view `vw_routines`
--
DROP VIEW IF EXISTS vw_routines CASCADE;

--
-- Drop procedure `pr_routine_insert`
--
DROP PROCEDURE IF EXISTS pr_routine_insert;

--
-- Drop table `routines`
--
DROP TABLE IF EXISTS routines;

--
-- Drop view `vw_users`
--
DROP VIEW IF EXISTS vw_users CASCADE;

--
-- Drop procedure `pr_login`
--
DROP PROCEDURE IF EXISTS pr_login;

--
-- Drop procedure `pr_user_delete`
--
DROP PROCEDURE IF EXISTS pr_user_delete;

--
-- Drop procedure `pr_user_insert`
--
DROP PROCEDURE IF EXISTS pr_user_insert;

--
-- Drop procedure `pr_user_update`
--
DROP PROCEDURE IF EXISTS pr_user_update;

--
-- Drop table `users`
--
DROP TABLE IF EXISTS users;

--
-- Set default database
--
USE projeto;

--
-- Create table `users`
--
CREATE TABLE users (
  id int(11) UNSIGNED NOT NULL AUTO_INCREMENT,
  email varchar(50) NOT NULL,
  name varchar(255) NOT NULL,
  password varchar(255) NOT NULL,
  created_at timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 69,
AVG_ROW_LENGTH = 4096,
CHARACTER SET utf8,
COLLATE utf8_general_ci;

DELIMITER $$

--
-- Create procedure `pr_user_update`
--
CREATE DEFINER = 'root'@'%'
PROCEDURE pr_user_update (IN v_id bigint, IN v_name varchar(255), IN v_email varchar(255), IN v_password varchar(255), INOUT message varchar(255), INOUT success tinyint)
BEGIN
  DECLARE exists_user tinyint DEFAULT 0;
  DECLARE v_success tinyint(1) DEFAULT 1;
  DECLARE v_message varchar(255) DEFAULT '';

  SELECT
    COUNT(1) INTO exists_user
  FROM users
  WHERE id = v_id;


  IF exists_user = 0 THEN
    SET v_message = CONCAT(v_message, 'usuário não encontrado||');
    SET v_success = FALSE;
  END IF;

  IF exists_user = 1 THEN
    UPDATE users
    SET email = v_email,
        password = v_password,
        name = v_name
    WHERE id = v_id LIMIT 1;
    SET v_success = v_id;
    SET v_message = 'Usuário atualizado com sucesso';
  END IF;
  SET message = v_message;
  SET success = v_success;
END
$$

--
-- Create procedure `pr_user_insert`
--
CREATE DEFINER = 'root'@'%'
PROCEDURE pr_user_insert (IN v_name varchar(255), IN v_email varchar(255), IN v_password varchar(255), INOUT message varchar(255), INOUT success tinyint)
BEGIN
  DECLARE v_success tinyint(1) DEFAULT 1;
  DECLARE v_message varchar(255) DEFAULT '';
  IF v_email IS NULL
    OR v_email = '' THEN
    SET v_message = CONCAT(v_message, 'e-mail é obrigatório||');
    SET v_success = FALSE;
  END IF;

  IF v_password IS NULL
    OR v_password = '' THEN
    SET v_message = CONCAT(v_message, 'senha é obrigatório||');
    SET v_success = FALSE;
  END IF;

  IF v_name IS NULL
    OR v_name = '' THEN
    SET v_message = CONCAT(v_message, 'nome é obrigatório||');
    SET v_success = FALSE;
  END IF;

  IF v_success = 1 THEN
    INSERT INTO users (email, name, password)
      VALUES (v_email, v_name, v_password);
    SET success = LAST_INSERT_ID();
    SET message = 'Usuário inserido com sucesso';
  ELSE
    SET success = FALSE;
    SET message = v_message;
  END IF;


END
$$

--
-- Create procedure `pr_user_delete`
--
CREATE DEFINER = 'root'@'%'
PROCEDURE pr_user_delete (IN v_id bigint, INOUT message varchar(255), INOUT success tinyint)
BEGIN
  DECLARE v_success tinyint(1) DEFAULT 1;
  DECLARE v_message varchar(255) DEFAULT '';
  DECLARE exists_user tinyint DEFAULT 0;
  IF v_id IS NULL THEN
    SET v_message = CONCAT(v_message, 'id é obrigatório||');
    SET v_success = FALSE;
  END IF;

  SELECT
    COUNT(1) INTO exists_user
  FROM users
  WHERE id = v_id;

  IF exists_user = 0 THEN
    SET v_message = CONCAT(v_message, 'usuário não encontrado||');
    SET v_success = FALSE;
  END IF;

  IF v_success = 1
    AND exists_user = TRUE THEN
    DELETE
      FROM users
    WHERE id = v_id LIMIT 1;
    SET message = 'Usuário apagado com sucesso';
    SET success = v_id;
  ELSE
    SET success = FALSE;
    SET message = v_message;
  END IF;
END
$$

--
-- Create procedure `pr_login`
--
CREATE DEFINER = 'root'@'%'
PROCEDURE pr_login (IN v_email varchar(255), IN v_password varchar(255), INOUT message varchar(255), INOUT success int(11))
BEGIN
  DECLARE v_success int(11) DEFAULT 1;
  DECLARE v_message varchar(255) DEFAULT '';
  DECLARE exists_email tinyint(1) DEFAULT 1;
  DECLARE password_correct tinyint(1) DEFAULT 1;

  IF v_email IS NULL
    OR v_email = '' THEN
    SET v_message = CONCAT(v_message, 'email é obrigatório||');
    SET v_success = FALSE;
  END IF;

  IF v_password IS NULL
    OR v_password = '' THEN
    SET v_message = CONCAT(v_message, 'senha é obrigatório||');
    SET v_success = FALSE;
  END IF;

  SELECT
    COUNT(1) INTO exists_email
  FROM users
  WHERE email = v_email;

  IF exists_email = 0 THEN
    SET v_message = CONCAT(v_message, 'email não encontrado||');
    SET v_success = FALSE;
  END IF;


  IF v_success = 1
    AND exists_email > 0 THEN
    -- email ok
    SELECT
      COUNT(1) INTO password_correct
    FROM users
    WHERE email = v_email
    AND password = v_password;

    IF password_correct = 1 THEN
      -- senha ok
      SET message = 'Login encontrado';
      SELECT
        id INTO success
      FROM users
      WHERE email = v_email
      AND password = v_password LIMIT 1;
    ELSE
      -- senha incorreta
      SET message = 'Senha inválida';
      SET success = 0;
    END IF;
  ELSE
    SET message = 'Login inválido';
    SET success = 0;
  END IF;
END
$$

DELIMITER ;

--
-- Create view `vw_users`
--
CREATE
DEFINER = 'root'@'%'
VIEW vw_users
AS
SELECT
  `users`.`id` AS `id`,
  `users`.`email` AS `email`,
  `users`.`name` AS `name`,
  `users`.`created_at` AS `created_at`,
  `users`.`updated_at` AS `updated_at`
FROM `users`
WITH LOCAL CHECK OPTION;

--
-- Create table `routines`
--
CREATE TABLE routines (
  id int(11) UNSIGNED NOT NULL AUTO_INCREMENT,
  description varchar(255) DEFAULT NULL,
  routine_user int(11) UNSIGNED NOT NULL,
  PRIMARY KEY (id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 3,
AVG_ROW_LENGTH = 8192,
CHARACTER SET latin1,
COLLATE latin1_swedish_ci;

--
-- Create foreign key
--
ALTER TABLE routines
ADD CONSTRAINT FK_routine_routine_user FOREIGN KEY (routine_user)
REFERENCES users (id) ON DELETE NO ACTION;

DELIMITER $$

--
-- Create procedure `pr_routine_insert`
--
CREATE DEFINER = 'root'@'%'
PROCEDURE pr_routine_insert (IN v_description varchar(255), IN v_routine_user int(11), INOUT message varchar(255), INOUT success tinyint)
COMMENT 'ategory'
BEGIN
  DECLARE v_success tinyint(1) DEFAULT 1;
  DECLARE v_message varchar(255) DEFAULT '';
  DECLARE exists_user tinyint(1) DEFAULT 1;

  IF v_description IS NULL
    OR v_description = '' THEN
    SET v_message = CONCAT(v_message, 'descrição é obrigatória||');
    SET v_success = FALSE;
  END IF;

  IF v_routine_user IS NULL
    OR v_routine_user = '' THEN
    SET v_message = CONCAT(v_message, 'Dono da rotina é obrigatório||');
    SET v_success = FALSE;
  END IF;

  SELECT
    COUNT(1) INTO exists_user
  FROM users
  WHERE id = v_routine_user;

  IF exists_user = 0 THEN
    SET v_message = CONCAT(v_message, 'usuário não encontrado||');
    SET v_success = FALSE;
  END IF;

  IF v_success = 1
    AND exists_user = TRUE THEN
    INSERT INTO routines (description, routine_user)
      VALUES (v_description, v_routine_user);
    SET message = 'Rotina criada com sucesso';
    SET success = LAST_INSERT_ID();
  ELSE
    SET success = FALSE;
    SET message = v_message;
  END IF;

END
$$

DELIMITER ;

--
-- Create view `vw_routines`
--
CREATE
DEFINER = 'root'@'%'
VIEW vw_routines
AS
SELECT
  `routines`.`id` AS `id`,
  `routines`.`description` AS `description`,
  `users`.`email` AS `user_email`,
  `users`.`name` AS `user_name`,
  `users`.`id` AS `user_id`
FROM (`routines`
  JOIN `users`
    ON ((`routines`.`routine_user` = `users`.`id`)));

--
-- Create table `categories_routines`
--
CREATE TABLE categories_routines (
  id int(11) NOT NULL AUTO_INCREMENT,
  category_id int(11) UNSIGNED NOT NULL,
  routine_id int(11) UNSIGNED NOT NULL,
  PRIMARY KEY (id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 2,
CHARACTER SET latin1,
COLLATE latin1_swedish_ci;

--
-- Create foreign key
--
ALTER TABLE categories_routines
ADD CONSTRAINT FK_routines_categories_routine_id FOREIGN KEY (routine_id)
REFERENCES routines (id) ON DELETE NO ACTION;

DELIMITER $$

--
-- Create procedure `pr_category_routine_delete`
--
CREATE DEFINER = 'root'@'%'
PROCEDURE pr_category_routine_delete (IN v_id bigint, INOUT message varchar(255), INOUT success tinyint)
BEGIN
  DECLARE v_success tinyint(1) DEFAULT 1;
  DECLARE v_message varchar(255) DEFAULT '';
  DECLARE exists_relation tinyint DEFAULT 0;
  IF v_id IS NULL THEN
    SET v_message = CONCAT(v_message, 'id é obrigatório||');
    SET v_success = FALSE;
  END IF;

  SELECT
    COUNT(1) INTO exists_relation
  FROM categories_routines
  WHERE id = v_id;

  IF exists_relation = 0 THEN
    SET v_message = CONCAT(v_message, 'relação não encontrada||');
    SET v_success = FALSE;
  END IF;

  IF v_success = 1
    AND exists_relation = TRUE THEN
    DELETE
      FROM categories_routines
    WHERE id = v_id LIMIT 1;
    SET message = 'relação apagada com sucesso';
    SET success = v_id;
  ELSE
    SET success = FALSE;
    SET message = v_message;
  END IF;
END
$$

DELIMITER ;

--
-- Create table `categories`
--
CREATE TABLE categories (
  id int(11) UNSIGNED NOT NULL AUTO_INCREMENT,
  description varchar(255) DEFAULT NULL,
  category_user int(11) UNSIGNED DEFAULT NULL,
  created_at timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 4,
AVG_ROW_LENGTH = 8192,
CHARACTER SET latin1,
COLLATE latin1_swedish_ci;

--
-- Create foreign key
--
ALTER TABLE categories
ADD CONSTRAINT FK_category_category_user FOREIGN KEY (category_user)
REFERENCES users (id) ON DELETE NO ACTION;

DELIMITER $$

--
-- Create procedure `pr_routine_delete`
--
CREATE DEFINER = 'root'@'%'
PROCEDURE pr_routine_delete (IN v_id bigint, INOUT message varchar(255), INOUT success tinyint)
BEGIN
  DECLARE v_success tinyint(1) DEFAULT 1;
  DECLARE v_message varchar(255) DEFAULT '';
  DECLARE exists_category tinyint DEFAULT 0;
  IF v_id IS NULL THEN
    SET v_message = CONCAT(v_message, 'id é obrigatório||');
    SET v_success = FALSE;
  END IF;

  SELECT
    COUNT(1) INTO exists_category
  FROM routines
  WHERE id = v_id;

  IF exists_category = 0 THEN
    SET v_message = CONCAT(v_message, 'rotina não encontrada||');
    SET v_success = FALSE;
  END IF;

  IF v_success = 1
    AND exists_category = TRUE THEN
    DELETE
      FROM categories
    WHERE id = v_id LIMIT 1;
    SET message = 'Rotina apagada com sucesso';
    SET success = v_id;
  ELSE
    SET success = FALSE;
    SET message = v_message;
  END IF;
END
$$

--
-- Create procedure `pr_category_update`
--
CREATE DEFINER = 'root'@'%'
PROCEDURE pr_category_update (IN v_id int, IN v_description varchar(255), IN v_category_user int, INOUT message varchar(255), INOUT success tinyint)
BEGIN
  DECLARE v_success tinyint(1) DEFAULT 1;
  DECLARE v_message varchar(255) DEFAULT '';
  DECLARE exists_user tinyint(1) DEFAULT 1;

  IF v_description IS NULL
    OR v_description = '' THEN
    SET v_message = CONCAT(v_message, 'descrição é obrigatória||');
    SET v_success = FALSE;
  END IF;

  IF v_category_user IS NULL
    OR v_category_user = '' THEN
    SET v_message = CONCAT(v_message, 'Dono da categoria é obrigatório||');
    SET v_success = FALSE;
  END IF;

  SELECT
    COUNT(1) INTO exists_user
  FROM users
  WHERE id = v_category_user;

  IF exists_user = 0 THEN
    SET v_message = CONCAT(v_message, 'usuário não encontrado||');
    SET v_success = FALSE;
  END IF;

  IF v_success = 1
    AND exists_user = TRUE THEN
    UPDATE categories
    SET description = v_description,
        category_user = v_category_user
    WHERE id = v_id LIMIT 1;
    SET message = 'Categoria editada com sucesso';
    SET success = v_id;
  ELSE
    SET success = FALSE;
    SET message = v_message;
  END IF;
END
$$

--
-- Create procedure `pr_category_routine_insert`
--
CREATE DEFINER = 'root'@'%'
PROCEDURE pr_category_routine_insert (IN v_category int(11), IN v_routine int(11), INOUT message varchar(255), INOUT success tinyint)
COMMENT 'ategory'
BEGIN
  DECLARE v_success tinyint(1) DEFAULT 1;
  DECLARE v_message varchar(255) DEFAULT '';
  DECLARE exists_category tinyint(1) DEFAULT 1;
  DECLARE exists_routine tinyint(1) DEFAULT 1;

  IF v_category IS NULL
    OR v_category = '' THEN
    SET v_message = CONCAT(v_message, 'categoria é obrigatória||');
    SET v_success = FALSE;
  END IF;

  IF v_routine IS NULL
    OR v_routine = '' THEN
    SET v_message = CONCAT(v_message, 'Rotina é obrigatório||');
    SET v_success = FALSE;
  END IF;

  SELECT
    COUNT(1) INTO exists_category
  FROM categories
  WHERE id = v_category;

  SELECT
    COUNT(1) INTO exists_routine
  FROM routines
  WHERE id = v_routine;

  IF exists_category = 0 THEN
    SET v_message = CONCAT(v_message, 'Categoria não encontrada||');
    SET v_success = FALSE;
  END IF;

  IF exists_routine = 0 THEN
    SET v_message = CONCAT(v_message, 'Rotina não encontrada||');
    SET v_success = FALSE;
  END IF;

  IF v_success = 1
    AND exists_category = TRUE
    AND exists_routine = TRUE THEN
    INSERT INTO categories_routines (category_id, routine_id)
      VALUES (v_category, v_routine);
    SET message = 'Relação criada com sucesso';
    SET success = LAST_INSERT_ID();
  ELSE
    SET success = FALSE;
    SET message = v_message;
  END IF;

END
$$

--
-- Create procedure `pr_category_insert`
--
CREATE DEFINER = 'root'@'%'
PROCEDURE pr_category_insert (IN v_description varchar(255), IN v_category_user int(11), INOUT message varchar(255), INOUT success tinyint)
COMMENT 'ategory'
BEGIN
  DECLARE v_success tinyint(1) DEFAULT 1;
  DECLARE v_message varchar(255) DEFAULT '';
  DECLARE exists_user tinyint(1) DEFAULT 1;

  IF v_description IS NULL
    OR v_description = '' THEN
    SET v_message = CONCAT(v_message, 'descrição é obrigatória||');
    SET v_success = FALSE;
  END IF;

  IF v_category_user IS NULL
    OR v_category_user = '' THEN
    SET v_message = CONCAT(v_message, 'Dono da categoria é obrigatório||');
    SET v_success = FALSE;
  END IF;

  SELECT
    COUNT(1) INTO exists_user
  FROM users
  WHERE id = v_category_user;

  IF exists_user = 0 THEN
    SET v_message = CONCAT(v_message, 'usuário não encontrado||');
    SET v_success = FALSE;
  END IF;

  IF v_success = 1
    AND exists_user = TRUE THEN
    INSERT INTO categories (description, category_user)
      VALUES (v_description, v_category_user);
    SET message = 'Categoria criada com sucesso';
    SET success = LAST_INSERT_ID();
  ELSE
    SET success = FALSE;
    SET message = v_message;
  END IF;

END
$$

--
-- Create procedure `pr_category_delete`
--
CREATE DEFINER = 'root'@'%'
PROCEDURE pr_category_delete (IN v_id bigint, INOUT message varchar(255), INOUT success tinyint)
BEGIN
  DECLARE v_success tinyint(1) DEFAULT 1;
  DECLARE v_message varchar(255) DEFAULT '';
  DECLARE exists_category tinyint DEFAULT 0;
  IF v_id IS NULL THEN
    SET v_message = CONCAT(v_message, 'id é obrigatório||');
    SET v_success = FALSE;
  END IF;

  SELECT
    COUNT(1) INTO exists_category
  FROM categories
  WHERE id = v_id;

  IF exists_category = 0 THEN
    SET v_message = CONCAT(v_message, 'categoria não encontrada||');
    SET v_success = FALSE;
  END IF;

  IF v_success = 1
    AND exists_category = TRUE THEN
    DELETE
      FROM categories
    WHERE id = v_id LIMIT 1;
    SET message = 'Categoria apagada com sucesso';
    SET success = v_id;
  ELSE
    SET success = FALSE;
    SET message = v_message;
  END IF;
END
$$

DELIMITER ;

--
-- Create view `vw_category_routine`
--
CREATE
DEFINER = 'root'@'%'
VIEW vw_category_routine
AS
SELECT
  `categories_routines`.`id` AS `id`,
  `routines`.`id` AS `routine_id`,
  `routines`.`description` AS `routine_description`,
  `routines`.`routine_user` AS `routine_user`,
  `categories`.`id` AS `category_id`,
  `categories`.`description` AS `category_description`,
  `categories`.`category_user` AS `category_user`
FROM ((`categories_routines`
  JOIN `routines`
    ON ((`categories_routines`.`routine_id` = `routines`.`id`)))
  JOIN `categories`
    ON ((`categories_routines`.`category_id` = `categories`.`id`)));

--
-- Create view `vw_categories`
--
CREATE
DEFINER = 'root'@'%'
VIEW vw_categories
AS
SELECT
  `categories`.`id` AS `id`,
  `categories`.`description` AS `description`,
  `categories`.`category_user` AS `category_user`,
  `categories`.`created_at` AS `created_at`,
  `categories`.`updated_at` AS `updated_at`,
  `users`.`email` AS `user_email`,
  `users`.`name` AS `user_name`,
  `users`.`id` AS `user_id`
FROM (`categories`
  JOIN `users`
    ON ((`categories`.`category_user` = `users`.`id`)));

--
-- Create table `priorities`
--
CREATE TABLE priorities (
  id int(11) UNSIGNED NOT NULL AUTO_INCREMENT,
  description varchar(255) DEFAULT NULL,
  priority_number int(11) DEFAULT NULL,
  created_at timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 6,
AVG_ROW_LENGTH = 3276,
CHARACTER SET utf8,
COLLATE utf8_general_ci;

DELIMITER $$

--
-- Create procedure `pr_priority_insert`
--
CREATE DEFINER = 'root'@'%'
PROCEDURE pr_priority_insert (IN v_description varchar(255), IN v_priority_number int(11), INOUT message varchar(255), INOUT success tinyint)
BEGIN
  DECLARE v_success tinyint(1) DEFAULT 1;
  DECLARE v_message varchar(255) DEFAULT '';
  IF v_priority_number = '' THEN
    SET v_message = CONCAT(v_message, 'número é obrigatório||');
    SET v_success = FALSE;
  END IF;

  IF v_description IS NULL
    OR v_description = '' THEN
    SET v_message = CONCAT(v_message, 'descrição é obrigatória||');
    SET v_success = FALSE;
  END IF;

  IF v_success = 1 THEN
    INSERT INTO priorities (description, priority_number)
      VALUES (v_description, v_priority_number);
    SET success = LAST_INSERT_ID();
    SET message = 'Prioridade inserida com sucesso';
  ELSE
    SET success = FALSE;
    SET message = v_message;
  END IF;
END
$$

DELIMITER ;

--
-- Create view `vw_priorities`
--
CREATE
DEFINER = 'root'@'%'
VIEW vw_priorities
AS
SELECT
  `priorities`.`id` AS `id`,
  `priorities`.`description` AS `description`,
  `priorities`.`priority_number` AS `priority_number`,
  `priorities`.`created_at` AS `created_at`,
  `priorities`.`updated_at` AS `updated_at`
FROM `priorities`;

--
-- Create table `tasks`
--
CREATE TABLE tasks (
  id int(11) UNSIGNED NOT NULL AUTO_INCREMENT,
  description varchar(255) DEFAULT NULL,
  completed_at timestamp NULL DEFAULT NULL,
  task_priority int(11) UNSIGNED DEFAULT NULL,
  task_user int(11) UNSIGNED DEFAULT NULL,
  created_at timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 4,
AVG_ROW_LENGTH = 8192,
CHARACTER SET utf8,
COLLATE utf8_general_ci;

--
-- Create foreign key
--
ALTER TABLE tasks
ADD CONSTRAINT FK_tasks_task_priority FOREIGN KEY (task_priority)
REFERENCES priorities (id) ON DELETE NO ACTION;

--
-- Create foreign key
--
ALTER TABLE tasks
ADD CONSTRAINT FK_tasks_task_user FOREIGN KEY (task_user)
REFERENCES users (id) ON DELETE NO ACTION;

DELIMITER $$

--
-- Create procedure `pr_task_update`
--
CREATE DEFINER = 'root'@'%'
PROCEDURE pr_task_update (IN v_id int, IN v_description varchar(255), IN v_completed_at tinyint, IN v_task_priority int, IN v_task_user int, INOUT message varchar(255), INOUT success tinyint)
BEGIN
  DECLARE v_success tinyint(1) DEFAULT 1;
  DECLARE v_message varchar(255) DEFAULT '';
  DECLARE exists_priority tinyint(1) DEFAULT 1;
  DECLARE exists_task tinyint(1) DEFAULT 1;
  DECLARE exists_user tinyint(1) DEFAULT 1;

  IF v_description IS NULL
    OR v_description = '' THEN
    SET v_message = CONCAT(v_message, 'descrição é obrigatória||');
    SET v_success = FALSE;
  END IF;

  IF v_completed_at <> FALSE
    AND v_completed_at <> TRUE THEN
    SET v_message = CONCAT(v_message, 'completo ou não é obrigatório||');
    SET v_success = FALSE;
  END IF;

  IF v_task_priority IS NULL
    OR v_task_priority = '' THEN
    SET v_message = CONCAT(v_message, 'Prioridade da tarefa é obrigatória||');
    SET v_success = FALSE;
  END IF;

  IF v_task_user IS NULL
    OR v_task_user = '' THEN
    SET v_message = CONCAT(v_message, 'Dono da task é obrigatório||');
    SET v_success = FALSE;
  END IF;

  SELECT
    COUNT(1) INTO exists_task
  FROM tasks
  WHERE id = v_task_priority;

  SELECT
    COUNT(1) INTO exists_priority
  FROM priorities
  WHERE id = v_task_priority;

  SELECT
    COUNT(1) INTO exists_user
  FROM users
  WHERE id = v_task_user;

  IF exists_user = 0 THEN
    SET v_message = CONCAT(v_message, 'usuário não encontrado||');
    SET v_success = FALSE;
  END IF;

  IF exists_priority = 0 THEN
    SET v_message = CONCAT(v_message, 'prioridade da task não encontrada||');
    SET v_success = FALSE;
  END IF;

  IF v_success = 1
    AND exists_user = TRUE
    AND exists_priority = TRUE THEN
    UPDATE tasks
    SET description = v_description,
        completed_at = v_completed_at,
        task_priority = v_task_priority,
        task_user = v_task_user
    WHERE id = v_id LIMIT 1;
    SET message = 'Task editada com sucesso';
    SET success = v_id;
  ELSE
    SET success = FALSE;
    SET message = v_message;
  END IF;
END
$$

--
-- Create procedure `pr_task_insert`
--
CREATE DEFINER = 'root'@'%'
PROCEDURE pr_task_insert (IN v_description varchar(255), IN v_completed_at tinyint, IN v_task_priority int, IN v_task_user int, INOUT message varchar(255), INOUT success tinyint)
BEGIN
  DECLARE v_success tinyint(1) DEFAULT 1;
  DECLARE v_message varchar(255) DEFAULT '';
  DECLARE exists_priority tinyint(1) DEFAULT 1;
  DECLARE exists_user tinyint(1) DEFAULT 1;

  IF v_description IS NULL
    OR v_description = '' THEN
    SET v_message = CONCAT(v_message, 'descrição é obrigatória||');
    SET v_success = FALSE;
  END IF;

  IF v_completed_at <> FALSE
    AND v_completed_at <> TRUE THEN
    SET v_message = CONCAT(v_message, 'completo ou não é obrigatório||');
    SET v_success = FALSE;
  END IF;

  IF v_task_priority IS NULL
    OR v_task_priority = '' THEN
    SET v_message = CONCAT(v_message, 'Prioridade da tarefa é obrigatória||');
    SET v_success = FALSE;
  END IF;

  IF v_task_user IS NULL
    OR v_task_user = '' THEN
    SET v_message = CONCAT(v_message, 'Dono da task é obrigatório||');
    SET v_success = FALSE;
  END IF;

  SELECT
    COUNT(1) INTO exists_priority
  FROM priorities
  WHERE id = v_task_priority;

  SELECT
    COUNT(1) INTO exists_user
  FROM users
  WHERE id = v_task_user;

  IF exists_user = 0 THEN
    SET v_message = CONCAT(v_message, 'usuário não encontrado||');
    SET v_success = FALSE;
  END IF;

  IF exists_priority = 0 THEN
    SET v_message = CONCAT(v_message, 'prioridade da task não encontrada||');
    SET v_success = FALSE;
  END IF;

  IF v_success = 1
    AND exists_user = TRUE
    AND exists_priority = TRUE THEN
    INSERT INTO tasks (description, completed_at, task_priority, task_user)
      VALUES (v_description, v_completed_at, v_task_priority, v_task_user);
    SET message = 'Task criada com sucesso';
    SET success = LAST_INSERT_ID();
  ELSE
    SET success = FALSE;
    SET message = v_message;
  END IF;
END
$$

--
-- Create procedure `pr_task_delete`
--
CREATE DEFINER = 'root'@'%'
PROCEDURE pr_task_delete (IN v_id bigint, INOUT message varchar(255), INOUT success tinyint)
BEGIN
  DECLARE v_success tinyint(1) DEFAULT 1;
  DECLARE v_message varchar(255) DEFAULT '';
  DECLARE exists_task tinyint DEFAULT 0;
  IF v_id IS NULL THEN
    SET v_message = CONCAT(v_message, 'id é obrigatório||');
    SET v_success = FALSE;
  END IF;

  SELECT
    COUNT(1) INTO exists_task
  FROM tasks
  WHERE id = v_id;

  IF exists_task = 0 THEN
    SET v_message = CONCAT(v_message, 'task não encontrada||');
    SET v_success = FALSE;
  END IF;

  IF v_success = 1
    AND exists_task = TRUE THEN
    DELETE
      FROM tasks
    WHERE id = v_id LIMIT 1;
    SET message = 'Task apagada com sucesso';
    SET success = v_id;
  ELSE
    SET success = FALSE;
    SET message = v_message;
  END IF;
END
$$

DELIMITER ;

--
-- Create table `categories_tasks`
--
CREATE TABLE categories_tasks (
  id int(11) NOT NULL AUTO_INCREMENT,
  category_id int(11) UNSIGNED NOT NULL,
  task_id int(11) UNSIGNED NOT NULL,
  PRIMARY KEY (id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 11,
AVG_ROW_LENGTH = 8192,
CHARACTER SET latin1,
COLLATE latin1_swedish_ci;

--
-- Create foreign key
--
ALTER TABLE categories_tasks
ADD CONSTRAINT FK_categories_tasks_task_id FOREIGN KEY (task_id)
REFERENCES tasks (id) ON DELETE NO ACTION;

DELIMITER $$

--
-- Create procedure `pr_category_task_insert`
--
CREATE DEFINER = 'root'@'%'
PROCEDURE pr_category_task_insert (IN v_category int(11), IN v_task int(11), INOUT message varchar(255), INOUT success tinyint)
COMMENT 'ategory'
BEGIN
  DECLARE v_success tinyint(1) DEFAULT 1;
  DECLARE v_message varchar(255) DEFAULT '';
  DECLARE exists_category tinyint(1) DEFAULT 1;
  DECLARE exists_task tinyint(1) DEFAULT 1;

  IF v_category IS NULL
    OR v_category = '' THEN
    SET v_message = CONCAT(v_message, 'categoria é obrigatória||');
    SET v_success = FALSE;
  END IF;

  IF v_task IS NULL
    OR v_task = '' THEN
    SET v_message = CONCAT(v_message, 'Task é obrigatório||');
    SET v_success = FALSE;
  END IF;

  SELECT
    COUNT(1) INTO exists_category
  FROM categories
  WHERE id = v_category;

  SELECT
    COUNT(1) INTO exists_task
  FROM tasks
  WHERE id = v_task;

  IF exists_category = 0 THEN
    SET v_message = CONCAT(v_message, 'Categoria não encontrada||');
    SET v_success = FALSE;
  END IF;

  IF exists_task = 0 THEN
    SET v_message = CONCAT(v_message, 'Task não encontrada||');
    SET v_success = FALSE;
  END IF;

  IF v_success = 1
    AND exists_category = TRUE
    AND exists_task = TRUE THEN
    INSERT INTO categories_tasks (category_id, task_id)
      VALUES (v_category, v_task);
    SET message = 'Relação criada com sucesso';
    SET success = LAST_INSERT_ID();
  ELSE
    SET success = FALSE;
    SET message = v_message;
  END IF;

END
$$

--
-- Create procedure `pr_category_task_delete`
--
CREATE DEFINER = 'root'@'%'
PROCEDURE pr_category_task_delete (IN v_id bigint, INOUT message varchar(255), INOUT success tinyint)
BEGIN
  DECLARE v_success tinyint(1) DEFAULT 1;
  DECLARE v_message varchar(255) DEFAULT '';
  DECLARE exists_relation tinyint DEFAULT 0;
  IF v_id IS NULL THEN
    SET v_message = CONCAT(v_message, 'id é obrigatório||');
    SET v_success = FALSE;
  END IF;

  SELECT
    COUNT(1) INTO exists_relation
  FROM categories_tasks ct
  WHERE id = v_id;

  IF exists_relation = 0 THEN
    SET v_message = CONCAT(v_message, 'relação não encontrada||');
    SET v_success = FALSE;
  END IF;

  IF v_success = 1
    AND exists_relation = TRUE THEN
    DELETE
      FROM categories_tasks
    WHERE id = v_id LIMIT 1;
    SET message = 'relação apagada com sucesso';
    SET success = v_id;
  ELSE
    SET success = FALSE;
    SET message = v_message;
  END IF;
END
$$

DELIMITER ;

--
-- Create view `vw_tasks`
--
CREATE
DEFINER = 'root'@'%'
VIEW vw_tasks
AS
SELECT
  `users`.`id` AS `user_id`,
  `users`.`name` AS `user_name`,
  `priorities`.`id` AS `priority_id`,
  `priorities`.`description` AS `priority_description`,
  `priorities`.`priority_number` AS `priority_number`,
  `tasks`.`id` AS `id`,
  `tasks`.`description` AS `description`,
  `tasks`.`completed_at` AS `completed_at`,
  `tasks`.`task_priority` AS `task_priority`,
  `tasks`.`task_user` AS `task_user`,
  `tasks`.`created_at` AS `created_at`,
  `tasks`.`updated_at` AS `updated_at`,
  `users`.`email` AS `user_email`,
  `categories_tasks`.`id` AS `category_task_id`,
  `categories_tasks`.`category_id` AS `category_task_category_id`,
  `categories_tasks`.`task_id` AS `category_task_task_id`
FROM (((`tasks`
  JOIN `priorities`
    ON ((`tasks`.`task_priority` = `priorities`.`id`)))
  JOIN `users`
    ON ((`tasks`.`task_user` = `users`.`id`)))
  JOIN `categories_tasks`
    ON ((`categories_tasks`.`task_id` = `tasks`.`id`)));

--
-- Create view `vw_category_task`
--
CREATE
DEFINER = 'root'@'%'
VIEW vw_category_task
AS
SELECT
  `categories`.`id` AS `category_id`,
  `categories`.`description` AS `category_description`,
  `tasks`.`id` AS `task_id`,
  `tasks`.`description` AS `task_description`,
  `tasks`.`completed` AS `task_completed`,
  `categories_tasks`.`id` AS `id`
FROM ((`categories_tasks`
  JOIN `categories`
    ON ((`categories_tasks`.`category_id` = `categories`.`id`)))
  JOIN `tasks`
    ON ((`categories_tasks`.`task_id` = `tasks`.`id`)));

--
-- Create table `day_of_week`
--
CREATE TABLE day_of_week (
  id int(11) NOT NULL AUTO_INCREMENT,
  description varchar(255) DEFAULT NULL,
  PRIMARY KEY (id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 8,
AVG_ROW_LENGTH = 2340,
CHARACTER SET utf8,
COLLATE utf8_general_ci;

--
-- Create table `disponibilities`
--
CREATE TABLE disponibilities (
  id int(11) NOT NULL AUTO_INCREMENT,
  routine_id int(11) UNSIGNED NOT NULL,
  day_id int(11) NOT NULL,
  disponibility_morning tinyint(1) DEFAULT NULL,
  disponibility_afternoon tinyint(1) DEFAULT NULL,
  disponibility_night tinyint(1) DEFAULT NULL,
  created_at timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (id)
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 16384,
CHARACTER SET latin1,
COLLATE latin1_swedish_ci;

--
-- Create foreign key
--
ALTER TABLE disponibilities
ADD CONSTRAINT FK_disponibility_day_id FOREIGN KEY (day_id)
REFERENCES day_of_week (id) ON DELETE NO ACTION;

--
-- Create foreign key
--
ALTER TABLE disponibilities
ADD CONSTRAINT FK_disponibility_routine_id FOREIGN KEY (routine_id)
REFERENCES routines (id) ON DELETE NO ACTION;

DELIMITER $$

--
-- Create procedure `pr_disponibility_update`
--
CREATE DEFINER = 'root'@'%'
PROCEDURE pr_disponibility_update (IN v_id int(11), IN v_routine_id int(11), IN v_day_id int(11), IN v_disponibility_morning tinyint, IN v_disponibility_afternoon tinyint, IN v_disponibility_night tinyint, INOUT message varchar(255), INOUT success tinyint)
BEGIN
  DECLARE v_success tinyint(1) DEFAULT 1;
  DECLARE v_message varchar(255) DEFAULT '';
  DECLARE exists_priority tinyint(1) DEFAULT 1;
  DECLARE exists_routine tinyint(1) DEFAULT 1;
  DECLARE exists_day tinyint(1) DEFAULT 1;

  IF v_routine_id IS NULL
    OR v_routine_id = '' THEN
    SET v_message = CONCAT(v_message, 'Rotina é obrigatória||');
    SET v_success = FALSE;
  END IF;

  IF v_day_id IS NULL
    OR v_day_id = '' THEN
    SET v_message = CONCAT(v_message, 'Rotina é obrigatória||');
    SET v_success = FALSE;
  END IF;

  SELECT
    COUNT(1) INTO exists_routine
  FROM routines
  WHERE id = v_routine_id;

  SELECT
    COUNT(1) INTO exists_day
  FROM day_of_week dow
  WHERE id = v_day_id;

  IF v_success = 1
    AND exists_routine = TRUE
    AND exists_day = TRUE THEN
    UPDATE disponibilities
    SET routine_id = v_routine_id,
        day_id = v_day_id,
        disponibility_morning = v_disponibility_morning,
        disponibility_afternoon = v_disponibility_afternoon,
        disponibility_night = v_disponibility_night
    WHERE id = v_id LIMIT 1;
    SET message = 'Disponibilidade editada com sucesso';
    SET success = v_id;
  ELSE
    SET success = FALSE;
    SET message = v_message;
  END IF;
END
$$

--
-- Create procedure `pr_disponibility_insert`
--
CREATE DEFINER = 'root'@'%'
PROCEDURE pr_disponibility_insert (IN v_routine_id int(11), IN v_day_id int(11), IN v_disponibility_morning tinyint, IN v_disponibility_afternoon tinyint, IN v_disponibility_night tinyint, INOUT message varchar(255), INOUT success tinyint)
BEGIN
  DECLARE v_success tinyint(1) DEFAULT 1;
  DECLARE v_message varchar(255) DEFAULT '';
  DECLARE exists_routine tinyint(1) DEFAULT 1;
  DECLARE exists_day tinyint(1) DEFAULT 1;

  IF v_routine_id IS NULL
    OR v_routine_id = '' THEN
    SET v_message = CONCAT(v_message, 'Rotina é obrigatória||');
    SET v_success = FALSE;
  END IF;

  IF v_day_id = '' THEN
    SET v_message = CONCAT(v_message, 'Dia é obrigatório||');
    SET v_success = FALSE;
  END IF;

  SELECT
    COUNT(1) INTO exists_routine
  FROM routines r
  WHERE id = v_routine_id;

  SELECT
    COUNT(1) INTO exists_day
  FROM day_of_week dow
  WHERE id = v_day_id;

  IF v_success = 1
    AND exists_routine = TRUE
    AND exists_day = TRUE THEN
    INSERT INTO disponibilities (routine_id, day_id, disponibility_morning, disponibility_afternoon, disponibility_night)
      VALUES (v_routine_id, v_day_id, v_disponibility_morning, v_disponibility_afternoon, v_disponibility_night);
    SET message = 'Disponibilidade criada com sucesso';
    SET success = LAST_INSERT_ID();
  ELSE
    SET success = FALSE;
    SET message = v_message;
  END IF;

END
$$

--
-- Create procedure `pr_disponibility_delete`
--
CREATE DEFINER = 'root'@'%'
PROCEDURE pr_disponibility_delete (IN v_id bigint, INOUT message varchar(255), INOUT success tinyint)
BEGIN
  DECLARE v_success tinyint(1) DEFAULT 1;
  DECLARE v_message varchar(255) DEFAULT '';
  DECLARE exists_disponibility tinyint DEFAULT 0;
  IF v_id IS NULL THEN
    SET v_message = CONCAT(v_message, 'id é obrigatório||');
    SET v_success = FALSE;
  END IF;

  SELECT
    COUNT(1) INTO exists_disponibility
  FROM disponibilities
  WHERE id = v_id;

  IF exists_disponibility = 0 THEN
    SET v_message = CONCAT(v_message, 'disponibilidade não encontrado||');
    SET v_success = FALSE;
  END IF;

  IF v_success = 1
    AND exists_disponibility = TRUE THEN
    DELETE
      FROM disponibilities
    WHERE id = v_id LIMIT 1;
    SET message = 'Disponibilidade apagada com sucesso';
    SET success = v_id;
  ELSE
    SET success = FALSE;
    SET message = v_message;
  END IF;
END
$$

DELIMITER ;

--
-- Create view `vw_disponibilities`
--
CREATE
DEFINER = 'root'@'%'
VIEW vw_disponibilities
AS
SELECT
  `day_of_week`.`description` AS `day_description`,
  `routines`.`description` AS `routine_description`,
  `disponibilities`.`id` AS `id`,
  `disponibilities`.`routine_id` AS `routine_id`,
  `disponibilities`.`day_id` AS `day_id`,
  `disponibilities`.`disponibility_morning` AS `disponibility_morning`,
  `disponibilities`.`disponibility_afternoon` AS `disponibility_afternoon`,
  `disponibilities`.`disponibility_night` AS `disponibility_night`,
  `disponibilities`.`created_at` AS `created_at`,
  `disponibilities`.`updated_at` AS `updated_at`
FROM ((`disponibilities`
  JOIN `routines`
    ON ((`disponibilities`.`routine_id` = `routines`.`id`)))
  JOIN `day_of_week`
    ON ((`disponibilities`.`day_id` = `day_of_week`.`id`)));

DELIMITER $$

--
-- Create procedure `pr_usuario_atualiza`
--
CREATE DEFINER = 'root'@'%'
PROCEDURE pr_usuario_atualiza (IN v_nome varchar(255), IN v_email varchar(255), IN v_senha varchar(255), INOUT status varchar(255), INOUT sucesso tinyint)
BEGIN
  DECLARE v_sucesso tinyint(1) DEFAULT 1;
  DECLARE v_status varchar(255) DEFAULT '';
  IF v_email IS NULL THEN
    SET v_status = CONCAT(v_status, 'e-mail é obrigatório||');
    SET v_sucesso = FALSE;
  END IF;

  IF v_senha IS NULL THEN
    SET v_status = CONCAT(v_status, 'senha é obrigatório||');
    SET v_sucesso = FALSE;
  END IF;

  IF v_nome IS NULL THEN
    SET v_status = CONCAT(v_status, 'nome é obrigatório||');
    SET v_sucesso = FALSE;
  END IF;

  IF v_sucesso = 1 THEN
    INSERT INTO usuarios (email, nome, senha)
      VALUES (v_email, v_nome, v_senha);
    SET sucesso = TRUE;
    SET status = 'Usuário inserido com sucesso';
  ELSE
    SET sucesso = FALSE;
    SET status = v_status;
  END IF;
END
$$

DELIMITER ;

-- 
-- Dumping data for table priorities
--
INSERT INTO priorities VALUES
(1, 'urgente', NULL, '2021-11-21 21:24:35', '2021-11-21 21:24:35'),
(2, 'mais ou menos', NULL, '2021-11-21 21:24:41', '2021-11-21 21:24:41'),
(3, 'pode deixar para depois', NULL, '2021-11-21 21:24:51', '2021-11-21 21:24:51'),
(4, 'pode deixar para depois', NULL, '2021-11-21 21:29:09', '2021-11-21 21:29:09'),
(5, 'pode deixar para depois', NULL, '2021-11-21 21:30:16', '2021-11-21 21:30:16');

-- 
-- Dumping data for table users
--
INSERT INTO users VALUES
(65, 'fabio@lopes.dev', 'Fabio Lopes', '123456', '2021-11-21 19:37:40', '2021-11-21 19:37:40'),
(66, 'fabio@lopes.dev', 'Fabio Lopes', '1234567', '2021-11-21 19:39:17', '2021-11-28 17:39:10'),
(67, 'fabio@lopes.dev', 'Fabio Lopes', '1234568', '2021-11-21 19:39:36', '2021-11-28 17:39:12'),
(68, 'fabio@lopes.dev', 'Fabio Lopes', '1234569', '2021-11-21 20:57:14', '2021-11-28 17:39:14');

-- 
-- Dumping data for table day_of_week
--
INSERT INTO day_of_week VALUES
(1, 'Segunda-feira'),
(2, 'Terça-feira'),
(3, 'Quarta-feira'),
(4, 'Quinta-feira'),
(5, 'Sexta-feira'),
(6, 'Sábado'),
(7, 'Domingo');

-- 
-- Dumping data for table tasks
--
INSERT INTO tasks VALUES
(1, 'Qualquer coisa2', NULL, 2, 66, '2021-11-21 22:38:13', '2021-11-21 22:42:41'),
(2, 'Qualquer coisa', NULL, 2, 65, '2021-11-21 22:40:01', '2021-11-29 01:04:52'),
(3, 'Qualquer coisa', NULL, 1, 65, '2021-11-28 18:02:10', '2021-11-28 18:02:10');

-- 
-- Dumping data for table routines
--
INSERT INTO routines VALUES
(1, 'criando uma rotina', 65),
(2, 'criando uma rotina2', 65);

-- 
-- Dumping data for table disponibilities
--
-- Table projeto.disponibilities does not contain any data (it is empty)

-- 
-- Dumping data for table categories_tasks
--
INSERT INTO categories_tasks VALUES
(9, 1, 2),
(10, 2, 3);

-- 
-- Dumping data for table categories_routines
--
INSERT INTO categories_routines VALUES
(1, 2, 2);

-- 
-- Dumping data for table categories
--
INSERT INTO categories VALUES
(2, 'Qualquer coisa2', 66, '2021-11-28 01:21:58', '2021-11-28 01:23:43'),
(3, 'Qualquer coisa2', 66, '2021-11-28 16:48:04', '2021-11-28 16:48:27');

--
-- Set default database
--
USE projeto;

--
-- Drop trigger `user_update`
--
DROP TRIGGER IF EXISTS user_update;

--
-- Drop trigger `task_update`
--
DROP TRIGGER IF EXISTS task_update;

--
-- Drop trigger `priority_update`
--
DROP TRIGGER IF EXISTS priority_update;

--
-- Drop trigger `disponibility_update`
--
DROP TRIGGER IF EXISTS disponibility_update;

--
-- Drop trigger `category_update`
--
DROP TRIGGER IF EXISTS category_update;

--
-- Set default database
--
USE projeto;

DELIMITER $$

--
-- Create trigger `user_update`
--
CREATE
DEFINER = 'root'@'%'
TRIGGER user_update
BEFORE UPDATE
ON users
FOR EACH ROW
BEGIN
  SET NEW.updated_at = CURRENT_TIMESTAMP();
END
$$

--
-- Create trigger `task_update`
--
CREATE
DEFINER = 'root'@'%'
TRIGGER task_update
BEFORE UPDATE
ON tasks
FOR EACH ROW
BEGIN
  SET NEW.updated_at = CURRENT_TIMESTAMP();
END
$$

--
-- Create trigger `priority_update`
--
CREATE
DEFINER = 'root'@'%'
TRIGGER priority_update
BEFORE UPDATE
ON priorities
FOR EACH ROW
BEGIN
  SET NEW.updated_at = CURRENT_TIMESTAMP();
END
$$

--
-- Create trigger `disponibility_update`
--
CREATE
DEFINER = 'root'@'%'
TRIGGER disponibility_update
BEFORE UPDATE
ON disponibilities
FOR EACH ROW
BEGIN
  SET NEW.updated_at = CURRENT_TIMESTAMP();
END
$$

--
-- Create trigger `category_update`
--
CREATE
DEFINER = 'root'@'%'
TRIGGER category_update
BEFORE UPDATE
ON categories
FOR EACH ROW
BEGIN
  SET NEW.updated_at = CURRENT_TIMESTAMP();
END
$$

DELIMITER ;

-- 
-- Restore previous SQL mode
-- 
/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;

-- 
-- Enable foreign keys
-- 
/*!40014 SET FOREIGN_KEY_CHECKS = @OLD_FOREIGN_KEY_CHECKS */;