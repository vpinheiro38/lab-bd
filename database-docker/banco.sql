--
-- Script was generated by Devart dbForge Studio 2019 for MySQL, Version 8.2.23.0
-- Product home page: http://www.devart.com/dbforge/mysql/studio
-- Script date 21/11/2021 19:51:12
-- Server version: 5.7.36
-- Client version: 4.1
--

-- 
-- Disable foreign keys
-- 
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;

-- 
-- Set SQL mode
-- 
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;

-- 
-- Set character set the client will use to send SQL statements to the server
--
SET NAMES 'utf8';

--
-- Set default database
--
USE projeto;

--
-- Drop procedure `pr_usuario_atualiza`
--
DROP PROCEDURE IF EXISTS pr_usuario_atualiza;

--
-- Drop table `day_of_week`
--
DROP TABLE IF EXISTS day_of_week;

--
-- Drop view `vw_tasks`
--
DROP VIEW IF EXISTS vw_tasks CASCADE;

--
-- Drop procedure `pr_task_delete`
--
DROP PROCEDURE IF EXISTS pr_task_delete;

--
-- Drop procedure `pr_task_insert`
--
DROP PROCEDURE IF EXISTS pr_task_insert;

--
-- Drop procedure `pr_task_update`
--
DROP PROCEDURE IF EXISTS pr_task_update;

--
-- Drop table `tasks`
--
DROP TABLE IF EXISTS tasks;

--
-- Drop view `vw_users`
--
DROP VIEW IF EXISTS vw_users CASCADE;

--
-- Drop procedure `pr_user_delete`
--
DROP PROCEDURE IF EXISTS pr_user_delete;

--
-- Drop procedure `pr_user_insert`
--
DROP PROCEDURE IF EXISTS pr_user_insert;

--
-- Drop procedure `pr_user_update`
--
DROP PROCEDURE IF EXISTS pr_user_update;

--
-- Drop table `users`
--
DROP TABLE IF EXISTS users;

--
-- Drop view `vw_priorities`
--
DROP VIEW IF EXISTS vw_priorities CASCADE;

--
-- Drop procedure `pr_priority_insert`
--
DROP PROCEDURE IF EXISTS pr_priority_insert;

--
-- Drop table `priorities`
--
DROP TABLE IF EXISTS priorities;

--
-- Set default database
--
USE projeto;

--
-- Create table `priorities`
--
CREATE TABLE priorities (
  id int(11) UNSIGNED NOT NULL AUTO_INCREMENT,
  description varchar(255) DEFAULT NULL,
  priority_number int(11) DEFAULT NULL,
  created_at timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 6,
AVG_ROW_LENGTH = 3276,
CHARACTER SET utf8,
COLLATE utf8_general_ci;

DELIMITER $$

--
-- Create procedure `pr_priority_insert`
--
CREATE DEFINER = 'root'@'%'
PROCEDURE pr_priority_insert (IN v_description varchar(255), IN v_priority_number int(11), INOUT message varchar(255), INOUT success tinyint)
BEGIN
  DECLARE v_success tinyint(1) DEFAULT 1;
  DECLARE v_message varchar(255) DEFAULT '';
  IF v_priority_number = '' THEN
    SET v_message = CONCAT(v_message, 'número é obrigatório||');
    SET v_success = FALSE;
  END IF;

  IF v_description IS NULL
    OR v_description = '' THEN
    SET v_message = CONCAT(v_message, 'descrição é obrigatória||');
    SET v_success = FALSE;
  END IF;

  IF v_success = 1 THEN
    INSERT INTO priorities (description, priority_number)
      VALUES (v_description, v_priority_number);
    SET success = LAST_INSERT_ID();
    SET message = 'Prioridade inserida com sucesso';
  ELSE
    SET success = FALSE;
    SET message = v_message;
  END IF;
END
$$

DELIMITER ;

--
-- Create view `vw_priorities`
--
CREATE
DEFINER = 'root'@'%'
VIEW vw_priorities
AS
SELECT
  `priorities`.`id` AS `id`,
  `priorities`.`description` AS `description`,
  `priorities`.`priority_number` AS `priority_number`,
  `priorities`.`created_at` AS `created_at`,
  `priorities`.`updated_at` AS `updated_at`
FROM `priorities`;

--
-- Create table `users`
--
CREATE TABLE users (
  id int(11) UNSIGNED NOT NULL AUTO_INCREMENT,
  email varchar(50) NOT NULL,
  name varchar(255) NOT NULL,
  password varchar(255) NOT NULL,
  created_at timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 69,
AVG_ROW_LENGTH = 4096,
CHARACTER SET utf8,
COLLATE utf8_general_ci;

DELIMITER $$

--
-- Create procedure `pr_user_update`
--
CREATE DEFINER = 'root'@'%'
PROCEDURE pr_user_update (IN v_id bigint, IN v_name varchar(255), IN v_email varchar(255), IN v_password varchar(255), INOUT message varchar(255), INOUT success tinyint)
BEGIN
  DECLARE exists_user tinyint DEFAULT 0;
  DECLARE v_success tinyint(1) DEFAULT 1;
  DECLARE v_message varchar(255) DEFAULT '';

  SELECT
    COUNT(1) INTO exists_user
  FROM users
  WHERE id = v_id;


  IF exists_user = 0 THEN
    SET v_message = CONCAT(v_message, 'usuário não encontrado||');
    SET v_success = FALSE;
  END IF;

  IF exists_user = 1 THEN
    UPDATE users
    SET email = v_email,
        password = v_password,
        name = v_name
    WHERE id = v_id LIMIT 1;
    SET v_success = v_id;
    SET v_message = 'Usuário atualizado com sucesso';
  END IF;
  SET message = v_message;
  SET success = v_success;
END
$$

--
-- Create procedure `pr_user_insert`
--
CREATE DEFINER = 'root'@'%'
PROCEDURE pr_user_insert (IN v_name varchar(255), IN v_email varchar(255), IN v_password varchar(255), INOUT message varchar(255), INOUT success tinyint)
BEGIN
  DECLARE v_success tinyint(1) DEFAULT 1;
  DECLARE v_message varchar(255) DEFAULT '';
  IF v_email IS NULL
    OR v_email = '' THEN
    SET v_message = CONCAT(v_message, 'e-mail é obrigatório||');
    SET v_success = FALSE;
  END IF;

  IF v_password IS NULL
    OR v_password = '' THEN
    SET v_message = CONCAT(v_message, 'senha é obrigatório||');
    SET v_success = FALSE;
  END IF;

  IF v_name IS NULL
    OR v_name = '' THEN
    SET v_message = CONCAT(v_message, 'nome é obrigatório||');
    SET v_success = FALSE;
  END IF;

  IF v_success = 1 THEN
    INSERT INTO users (email, name, password)
      VALUES (v_email, v_name, v_password);
    SET success = LAST_INSERT_ID();
    SET message = 'Usuário inserido com sucesso';
  ELSE
    SET success = FALSE;
    SET message = v_message;
  END IF;


END
$$

--
-- Create procedure `pr_user_delete`
--
CREATE DEFINER = 'root'@'%'
PROCEDURE pr_user_delete (IN v_id bigint, INOUT message varchar(255), INOUT success tinyint)
BEGIN
  DECLARE v_success tinyint(1) DEFAULT 1;
  DECLARE v_message varchar(255) DEFAULT '';
  DECLARE exists_user tinyint DEFAULT 0;
  IF v_id IS NULL THEN
    SET v_message = CONCAT(v_message, 'id é obrigatório||');
    SET v_success = FALSE;
  END IF;

  SELECT
    COUNT(1) INTO exists_user
  FROM users
  WHERE id = v_id;

  IF exists_user = 0 THEN
    SET v_message = CONCAT(v_message, 'usuário não encontrado||');
    SET v_success = FALSE;
  END IF;

  IF v_success = 1
    AND exists_user = TRUE THEN
    DELETE
      FROM users
    WHERE id = v_id LIMIT 1;
    SET message = 'Usuário apagado com sucesso';
    SET success = v_id;
  ELSE
    SET success = FALSE;
    SET message = v_message;
  END IF;
END
$$

DELIMITER ;

--
-- Create view `vw_users`
--
CREATE
DEFINER = 'root'@'%'
VIEW vw_users
AS
SELECT
  `users`.`id` AS `id`,
  `users`.`email` AS `email`,
  `users`.`name` AS `name`,
  `users`.`created_at` AS `created_at`,
  `users`.`updated_at` AS `updated_at`
FROM `users`
WITH LOCAL CHECK OPTION;

--
-- Create table `tasks`
--
CREATE TABLE tasks (
  id int(11) UNSIGNED NOT NULL AUTO_INCREMENT,
  description varchar(255) DEFAULT NULL,
  completed tinyint(4) DEFAULT NULL,
  task_priority int(11) UNSIGNED DEFAULT NULL,
  task_user int(11) UNSIGNED DEFAULT NULL,
  created_at timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 4,
AVG_ROW_LENGTH = 8192,
CHARACTER SET utf8,
COLLATE utf8_general_ci;

--
-- Create foreign key
--
ALTER TABLE tasks
ADD CONSTRAINT FK_tasks_task_priority FOREIGN KEY (task_priority)
REFERENCES priorities (id) ON DELETE NO ACTION;

--
-- Create foreign key
--
ALTER TABLE tasks
ADD CONSTRAINT FK_tasks_task_user FOREIGN KEY (task_user)
REFERENCES users (id) ON DELETE NO ACTION;

DELIMITER $$

--
-- Create procedure `pr_task_update`
--
CREATE DEFINER = 'root'@'%'
PROCEDURE pr_task_update (IN v_id int, IN v_description varchar(255), IN v_completed tinyint, IN v_task_priority int, IN v_task_user int, INOUT message varchar(255), INOUT success tinyint)
BEGIN
  DECLARE v_success tinyint(1) DEFAULT 1;
  DECLARE v_message varchar(255) DEFAULT '';
  DECLARE exists_priority tinyint(1) DEFAULT 1;
  DECLARE exists_task tinyint(1) DEFAULT 1;
  DECLARE exists_user tinyint(1) DEFAULT 1;

  IF v_description IS NULL
    OR v_description = '' THEN
    SET v_message = CONCAT(v_message, 'descrição é obrigatória||');
    SET v_success = FALSE;
  END IF;

  IF v_completed <> FALSE
    AND v_completed <> TRUE THEN
    SET v_message = CONCAT(v_message, 'completo ou não é obrigatório||');
    SET v_success = FALSE;
  END IF;

  IF v_task_priority IS NULL
    OR v_task_priority = '' THEN
    SET v_message = CONCAT(v_message, 'Prioridade da tarefa é obrigatória||');
    SET v_success = FALSE;
  END IF;

  IF v_task_user IS NULL
    OR v_task_user = '' THEN
    SET v_message = CONCAT(v_message, 'Dono da task é obrigatório||');
    SET v_success = FALSE;
  END IF;

  SELECT
    COUNT(1) INTO exists_task
  FROM tasks
  WHERE id = v_task_priority;

  SELECT
    COUNT(1) INTO exists_priority
  FROM priorities
  WHERE id = v_task_priority;

  SELECT
    COUNT(1) INTO exists_user
  FROM users
  WHERE id = v_task_user;

  IF exists_user = 0 THEN
    SET v_message = CONCAT(v_message, 'usuário não encontrado||');
    SET v_success = FALSE;
  END IF;

  IF exists_priority = 0 THEN
    SET v_message = CONCAT(v_message, 'prioridade da task não encontrada||');
    SET v_success = FALSE;
  END IF;

  IF v_success = 1
    AND exists_user = TRUE
    AND exists_priority = TRUE THEN
    UPDATE tasks
    SET description = v_description,
        completed = v_completed,
        task_priority = v_task_priority,
        task_user = v_task_user
    WHERE id = v_id LIMIT 1;
    SET message = 'Task editada com sucesso';
    SET success = v_id;
  ELSE
    SET success = FALSE;
    SET message = v_message;
  END IF;
END
$$

--
-- Create procedure `pr_task_insert`
--
CREATE DEFINER = 'root'@'%'
PROCEDURE pr_task_insert (IN v_description varchar(255), IN v_completed tinyint, IN v_task_priority int, IN v_task_user int, INOUT message varchar(255), INOUT success tinyint)
BEGIN
  DECLARE v_success tinyint(1) DEFAULT 1;
  DECLARE v_message varchar(255) DEFAULT '';
  DECLARE exists_priority tinyint(1) DEFAULT 1;
  DECLARE exists_user tinyint(1) DEFAULT 1;

  IF v_description IS NULL
    OR v_description = '' THEN
    SET v_message = CONCAT(v_message, 'descrição é obrigatória||');
    SET v_success = FALSE;
  END IF;

  IF v_completed <> FALSE
    AND v_completed <> TRUE THEN
    SET v_message = CONCAT(v_message, 'completo ou não é obrigatório||');
    SET v_success = FALSE;
  END IF;

  IF v_task_priority IS NULL
    OR v_task_priority = '' THEN
    SET v_message = CONCAT(v_message, 'Prioridade da tarefa é obrigatória||');
    SET v_success = FALSE;
  END IF;

  IF v_task_user IS NULL
    OR v_task_user = '' THEN
    SET v_message = CONCAT(v_message, 'Dono da task é obrigatório||');
    SET v_success = FALSE;
  END IF;

  SELECT
    COUNT(1) INTO exists_priority
  FROM priorities
  WHERE id = v_task_priority;

  SELECT
    COUNT(1) INTO exists_user
  FROM users
  WHERE id = v_task_user;

  IF exists_user = 0 THEN
    SET v_message = CONCAT(v_message, 'usuário não encontrado||');
    SET v_success = FALSE;
  END IF;

  IF exists_priority = 0 THEN
    SET v_message = CONCAT(v_message, 'prioridade da task não encontrada||');
    SET v_success = FALSE;
  END IF;

  IF v_success = 1
    AND exists_user = TRUE
    AND exists_priority = TRUE THEN
    INSERT INTO tasks (description, completed, task_priority, task_user)
      VALUES (v_description, v_completed, v_task_priority, v_task_user);
    SET message = 'Task criada com sucesso';
    SET success = LAST_INSERT_ID();
  ELSE
    SET success = FALSE;
    SET message = v_message;
  END IF;
END
$$

--
-- Create procedure `pr_task_delete`
--
CREATE DEFINER = 'root'@'%'
PROCEDURE pr_task_delete (IN v_id bigint, INOUT message varchar(255), INOUT success tinyint)
BEGIN
  DECLARE v_success tinyint(1) DEFAULT 1;
  DECLARE v_message varchar(255) DEFAULT '';
  DECLARE exists_task tinyint DEFAULT 0;
  IF v_id IS NULL THEN
    SET v_message = CONCAT(v_message, 'id é obrigatório||');
    SET v_success = FALSE;
  END IF;

  SELECT
    COUNT(1) INTO exists_task
  FROM tasks
  WHERE id = v_id;

  IF exists_task = 0 THEN
    SET v_message = CONCAT(v_message, 'task não encontrada||');
    SET v_success = FALSE;
  END IF;

  IF v_success = 1
    AND exists_task = TRUE THEN
    DELETE
      FROM tasks
    WHERE id = v_id LIMIT 1;
    SET message = 'Task apagada com sucesso';
    SET success = v_id;
  ELSE
    SET success = FALSE;
    SET message = v_message;
  END IF;
END
$$

DELIMITER ;

--
-- Create view `vw_tasks`
--
CREATE
DEFINER = 'root'@'%'
VIEW vw_tasks
AS
SELECT
  `users`.`id` AS `user_id`,
  `users`.`name` AS `user_name`,
  `priorities`.`id` AS `priority_id`,
  `priorities`.`description` AS `priority_description`,
  `priorities`.`priority_number` AS `priority_number`,
  `tasks`.`id` AS `id`,
  `tasks`.`description` AS `description`,
  `tasks`.`completed` AS `completed`,
  `tasks`.`task_priority` AS `task_priority`,
  `tasks`.`task_user` AS `task_user`,
  `tasks`.`created_at` AS `created_at`,
  `tasks`.`updated_at` AS `updated_at`,
  `users`.`email` AS `user_email`
FROM ((`tasks`
  JOIN `priorities`
    ON ((`tasks`.`task_priority` = `priorities`.`id`)))
  JOIN `users`
    ON ((`tasks`.`task_user` = `users`.`id`)));

--
-- Create table `day_of_week`
--
CREATE TABLE day_of_week (
  id int(11) NOT NULL AUTO_INCREMENT,
  description varchar(255) DEFAULT NULL,
  PRIMARY KEY (id)
)
ENGINE = INNODB,
CHARACTER SET utf8,
COLLATE utf8_general_ci;

DELIMITER $$

--
-- Create procedure `pr_usuario_atualiza`
--
CREATE DEFINER = 'root'@'%'
PROCEDURE pr_usuario_atualiza (IN v_nome varchar(255), IN v_email varchar(255), IN v_senha varchar(255), INOUT status varchar(255), INOUT sucesso tinyint)
BEGIN
  DECLARE v_sucesso tinyint(1) DEFAULT 1;
  DECLARE v_status varchar(255) DEFAULT '';
  IF v_email IS NULL THEN
    SET v_status = CONCAT(v_status, 'e-mail é obrigatório||');
    SET v_sucesso = FALSE;
  END IF;

  IF v_senha IS NULL THEN
    SET v_status = CONCAT(v_status, 'senha é obrigatório||');
    SET v_sucesso = FALSE;
  END IF;

  IF v_nome IS NULL THEN
    SET v_status = CONCAT(v_status, 'nome é obrigatório||');
    SET v_sucesso = FALSE;
  END IF;

  IF v_sucesso = 1 THEN
    INSERT INTO usuarios (email, nome, senha)
      VALUES (v_email, v_nome, v_senha);
    SET sucesso = TRUE;
    SET status = 'Usuário inserido com sucesso';
  ELSE
    SET sucesso = FALSE;
    SET status = v_status;
  END IF;
END
$$

DELIMITER ;

-- 
-- Dumping data for table users
--
INSERT INTO users VALUES
(65, 'fabio@lopes.dev', 'Fabio Lopes', '123456', '2021-11-21 19:37:40', '2021-11-21 19:37:40'),
(66, 'fabio@lopes.dev', 'Fabio Lopes', '123456', '2021-11-21 19:39:17', '2021-11-21 19:39:17'),
(67, 'fabio@lopes.dev', 'Fabio Lopes', '123456', '2021-11-21 19:39:36', '2021-11-21 19:39:36'),
(68, 'fabio@lopes.dev', 'Fabio Lopes', '123456', '2021-11-21 20:57:14', '2021-11-21 20:57:14');

-- 
-- Dumping data for table priorities
--
INSERT INTO priorities VALUES
(1, 'urgente', NULL, '2021-11-21 21:24:35', '2021-11-21 21:24:35'),
(2, 'mais ou menos', NULL, '2021-11-21 21:24:41', '2021-11-21 21:24:41'),
(3, 'pode deixar para depois', NULL, '2021-11-21 21:24:51', '2021-11-21 21:24:51'),
(4, 'pode deixar para depois', NULL, '2021-11-21 21:29:09', '2021-11-21 21:29:09'),
(5, 'pode deixar para depois', NULL, '2021-11-21 21:30:16', '2021-11-21 21:30:16');

-- 
-- Dumping data for table tasks
--
INSERT INTO tasks VALUES
(1, 'Qualquer coisa2', 1, 2, 66, '2021-11-21 22:38:13', '2021-11-21 22:42:41'),
(2, 'Qualquer coisa', 0, 1, 65, '2021-11-21 22:40:01', '2021-11-21 22:40:01');

-- 
-- Dumping data for table day_of_week
--
-- Table projeto.day_of_week does not contain any data (it is empty)

--
-- Set default database
--
USE projeto;

--
-- Drop trigger `user_update`
--
DROP TRIGGER IF EXISTS user_update;

--
-- Drop trigger `task_update`
--
DROP TRIGGER IF EXISTS task_update;

--
-- Set default database
--
USE projeto;

DELIMITER $$

--
-- Create trigger `user_update`
--
CREATE
DEFINER = 'root'@'%'
TRIGGER user_update
BEFORE UPDATE
ON users
FOR EACH ROW
BEGIN
  SET NEW.updated_at = CURRENT_TIMESTAMP();
END
$$

--
-- Create trigger `task_update`
--
CREATE
DEFINER = 'root'@'%'
TRIGGER task_update
BEFORE UPDATE
ON tasks
FOR EACH ROW
BEGIN
  SET NEW.updated_at = CURRENT_TIMESTAMP();
END
$$

DELIMITER ;

-- 
-- Restore previous SQL mode
-- 
/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;

-- 
-- Enable foreign keys
-- 
/*!40014 SET FOREIGN_KEY_CHECKS = @OLD_FOREIGN_KEY_CHECKS */;